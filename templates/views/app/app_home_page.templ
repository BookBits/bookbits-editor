package app

import (
	"fmt"

	"github.com/BookBits/bookbits-editor/internal/models"
	"github.com/BookBits/bookbits-editor/templates/components"
)

templ EmptySearchResults() {
	<div class="flex flex-col w-full h-full justify-center items-center p-4">
		<h3 class="text-md text-neutral-400">Type Something to start searching...</h3>
	</div>
}

templ SearchResults(files []models.ProjectFile, projects []models.Project) {
	<div class="flex flex-col w-full h-full justify-start items-start" x-data="{}" x-init="packagesBundle.loadIcons()">
	<h5 class="font-semibold text-sm w-full p-2 bg-neutral-50">Files</h5>
	<div class="flex flex-col my-2 w-full px-2">
	if len(files) > 0 {
	for _, file := range files {
		<div hx-trigger="click" hx-get={
		fmt.Sprintf("/app/projects/%v/files", file.ProjectID)
		} hx-swap="outerHTML" hx-target="#page-content" hx-select="#page-content" @htmx:after-on-load="popoverOpen=false;packagesBundle.loadIcons()" hx-push-url="true" class="flex flex-row space-x-1.5 p-2 items-center hover:bg-neutral-50 cursor-pointer group">
		<i data-lucide="file-text" class="w-4 h-4 text-neutral-500"></i>
		<p class="text-sm hover:underline">
		    { file.Name }
		</p>
		</div>
	}
	} else {
		<p class="text-sm text-neutral-400">No files match for current keyword. Try typing further.</p>
	}
	</div>
	<h5 class="font-semibold text-sm w-full p-2 bg-neutral-50">Projects</h5>
	<div class="flex flex-col my-2 w-full px-2">
	if len(projects) > 0 {
	for _, project := range projects {
		<div hx-trigger="click" hx-get={
		fmt.Sprintf("/app/projects/%v/files", project.ID)
		} hx-swap="outerHTML" hx-target="#page-content" hx-select="#page-content" @htmx:after-on-load="popoverOpen=false;packagesBundle.loadIcons()" hx-push-url="true" class="flex flex-row space-x-1.5 p-2 items-center hover:bg-neutral-50 cursor-pointer">
		<i data-lucide="folder-dot" class="w-4 h-4 text-neutral-500"></i>
		<p class="text-sm hover:underline">
		    { project.Name }
		</p>
		</div>
	}
	} else {
	<p class="text-sm text-neutral-400">No projects match for current keyword. Try typing further.</p>
	}
	</div>
	</div>
}

templ Search() {
<div x-data="{
        popoverOpen: false,
        popoverArrow: false,
        popoverPosition: 'bottom',
        popoverHeight: 0,
        popoverOffset: 8,
        popoverHeightCalculate() {
            this.$refs.popover.classList.add('invisible'); 
            this.popoverOpen=true; 
            let that=this;
            $nextTick(function(){ 
                that.popoverHeight = that.$refs.popover.offsetHeight;
                that.popoverOpen=false; 
                that.$refs.popover.classList.remove('invisible');
                that.$refs.popoverInner.setAttribute('x-transition', '');
                that.popoverPositionCalculate();
            });
        },
        popoverPositionCalculate(){
            if(window.innerHeight < (this.$refs.popoverButton.getBoundingClientRect().top + this.$refs.popoverButton.offsetHeight + this.popoverOffset + this.popoverHeight)){
                this.popoverPosition = 'top';
            } else {
                this.popoverPosition = 'bottom';
            }
        }
    }"
    x-init="
        that = this;
        window.addEventListener('resize', function(){
            popoverPositionCalculate();
        });
        $watch('popoverOpen', function(value){
            if(value){ popoverPositionCalculate(); document.getElementById('width').focus();  }
        });
    "
    class="relative w-full">
    
	<div class="w-full mx-auto flex flex-row items-center justify-center border rounded-md border-neutral-300 ring-offset-background focus-within:border-neutral-300 focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-neutral-400 px-4 group">
		<i data-lucide="search" class="w-4 h-4 text-neutral-500"></i>
		<input value="" x-ref="popoverButton" @click="popoverOpen=true" name="keyword" hx-get="/app/search" hx-trigger="input changed delay:500ms" hx-target="#search-results" hx-swap="innerHTML" @after-on-load="" type="text" placeholder="Search" class="flex focus:outline-none w-full h-10 px-3 py-2 text-sm bg-white placeholder:text-neutral-500 disabled:cursor-not-allowed disabled:opacity-50" />
	</div>

    <div x-ref="popover"
        x-show="popoverOpen"
        x-init="setTimeout(function(){ popoverHeightCalculate(); }, 100);"
        x-trap.inert="popoverOpen"
        @click.away="popoverOpen=false;"
        @keydown.escape.window="popoverOpen=false"
        :class="{ 'top-0 mt-12' : popoverPosition == 'bottom', 'bottom-0 mb-12' : popoverPosition == 'top' }"
        class="absolute w-full max-w-lg -translate-x-1/2 left-1/2" x-cloak>
        <div x-ref="popoverInner" x-show="popoverOpen" class="w-full bg-white border rounded-md shadow-sm border-neutral-200/70">
            <div x-show="popoverArrow && popoverPosition == 'bottom'" class="absolute top-0 inline-block w-5 mt-px overflow-hidden -translate-x-2 -translate-y-2.5 left-1/2"><div class="w-2.5 h-2.5 origin-bottom-left transform rotate-45 bg-white border-t border-l rounded-sm"></div></div>
            <div x-show="popoverArrow  && popoverPosition == 'top'" class="absolute bottom-0 inline-block w-5 mb-px overflow-hidden -translate-x-2 translate-y-2.5 left-1/2"><div class="w-2.5 h-2.5 origin-top-left transform -rotate-45 bg-white border-b border-l rounded-sm"></div></div>
            <div id="search-results">
	    @EmptySearchResults()
            </div>
        </div>
    </div>
</div>
}

templ UserDropdownMenu(user models.User, csrfToken string) {
<div x-data="{
        dropdownOpen: false,
	modalOpen: false,
	changePasswordModal: false
    }"
    class="relative">

    <button @click="dropdownOpen=true" class="inline-flex items-center justify-center h-12 py-2 pl-3 pr-12 text-sm font-medium transition-colors bg-white border rounded-md text-neutral-700 hover:bg-neutral-100 active:bg-white focus:bg-white focus:outline-none disabled:opacity-50 disabled:pointer-events-none">
        <span class="flex flex-col items-start flex-shrink-0 h-full ml-2 leading-none translate-y-px">
            <span>Welcome, {user.Username}</span>
            <span class="text-xs font-light text-neutral-400">{user.Email}</span>
        </span>
		<i data-lucide="chevron-down" class="absolute right-0 w-5 h-5 mr-3"></i>
    </button>

    <div x-show="dropdownOpen" 
        @click.away="dropdownOpen=false"
        x-transition:enter="ease-out duration-200"
        x-transition:enter-start="-translate-y-2"
        x-transition:enter-end="translate-y-0"
        class="absolute top-0 z-50 w-56 mt-12 -translate-x-1/2 left-1/2"
        x-cloak>
        <div class="p-1 mt-1 bg-white border rounded-md shadow-md border-neutral-200/70 text-neutral-700">
            <div class="px-2 py-1.5 text-sm font-semibold">My Account</div>
            <div class="h-px my-1 -mx-1 bg-neutral-200"></div>
			if user.Type == models.UserTypeAdmin {
            <button @click="modalOpen=true" class="relative flex w-full space-x-2 cursor-default select-none hover:bg-neutral-100 items-center rounded px-2 py-1.5 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50">
				<i data-lucide="wrench" class="h-4 w-4 text-neutral-500"></i>
                <span>Manage Users</span>
            </button>
			@UserManagementModal(csrfToken)
			}
            <button @click="changePasswordModal=true" class="relative flex w-full space-x-2 cursor-default select-none hover:bg-neutral-100 items-center rounded px-2 py-1.5 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50">
				<i data-lucide="pencil" class="h-4 w-4 text-neutral-500"></i>
                <span>Change Password</span>
            </button>
			@ChangePasswordModal(csrfToken)
            <button hx-post="/logout" hx-swap="none"
			hx-headers={
				fmt.Sprintf("{\"X-CSRF-Token\":\"%s\"}", csrfToken)
			}
			@htmx:before-on-load="appBundle.logout()" class="relative flex w-full space-x-2 cursor-default select-none hover:bg-neutral-100 items-center rounded px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50">
				<i data-lucide="log-out" class="h-4 w-4 text-neutral-500"></i>
                <span>Log out</span>
            </button>
        </div>
    </div>
</div>
}

templ AppHomePage(user models.User, csrfToken string, title string, content templ.Component) {
<!DOCTYPE html>
<html lang="en">
	<head>
		<title>{title}</title>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1"/>
	</head>
	<script src="/static/bundle-packages.js" defer></script>
	<script src="/static/bundle-app.js"></script>
	<body class="w-screen h-screen flex flex-col overflow-hidden" x-data="{}"
	x-init="
	window.toast = function(message, options = {}){
                let description = '';
                let type = 'default';
                let position = 'top-center';
                let html = '';
                if(typeof options.description != 'undefined') description = options.description;
                if(typeof options.type != 'undefined') type = options.type;
                if(typeof options.position != 'undefined') position = options.position;
                if(typeof options.html != 'undefined') html = options.html;
                
                window.dispatchEvent(new CustomEvent('toast-show', { detail : { type: type, message: message, description: description, position : position, html: html }}));
            }
	" @htmx:response-error.window="window.toast($event.detail.xhr.responseText, {
                        position: 'top-right',
                        type: 'danger'
                })">
		@components.Toasts()
		<header class="bg-white border-b-1 border border-b-neutral-200/70 text-neutral-700 py-2 flex justify-between items-center w-screen">
		  <div class="flex items-center ml-4">
		    <a href="/app" class="text-lg font-bold"><span class="text-blue-600">BookBits</span> Editor</a>
		  </div>
		  <div class="flex items-center w-[30%]">
			@Search()
		  </div>
		  <div class="flex items-center mr-4">
			@UserDropdownMenu(user, csrfToken)
		  </div>
		</header>
		<div class="w-full h-full flex flex-col items-center overflow-hidden">
			<div class="w-[90%] h-full overflow-auto">
				@content
			</div>
		</div>
	</body>
</html>
}
